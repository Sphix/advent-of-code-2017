enum Cell {
    DoNotEnter,
    UpDown,
    LeftRight,
    AllDir,
    Letter(char),
}

enum Direction {
    Up,
    Down,
    Left,
    Right,
}

struct Map {
    cells: Vec<Vec<Cell>>,
}

impl FromStr for Map {
    type Err=Error;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        s.split('\n').map(|line| {
            line.chars().map(|c| {
                match c {
                    ' ' => Ok(Cell::DoNotEnter),
                    '|' => Ok(Cell::UpDown),
                    '-' => Ok(Cell::LeftRight),
                    '+' => Ok(Cell::AllDir),
                    'A'..'Z' => Ok(Cell::Letter(c)),
                    _ => Error(format_err!("Invalid cell {}.", c)),
                }
            }).collect::<Result<Vec<_>, Error>>()
        }).collect::<Result<Vec<_>, Error>>()
    }
}

impl Map {
    fn find_start(&self) -> Option<usize> {
        self.cells[0].position(|cell| cell == Cell::UpDown)
    }

    fn check_left(x: usize, y: usize) -> Result<Option<char>, Error> {
    }

    fn run_map() -> Result<String, Error> {
        let mut letters = Vec::new();
        let mut y = 0;
        let mut x = self.find_start().ok_or(Err(format_err!("No start")))?;
        let mut current_direction = Direction::Down;

        while x > 0 && x < self.cells.len() && y > 0 && y < self.cells[x].len() {
            match self.cells[x][y] {
                Cell::UpDown => {
                    match current_direction {
                        Direction::Up => y -= 1,
                        Direction::Down => y += 1,
                        _ => bail!("Reached invalid place!"),
                    }
                }
                Cell::LeftRight => {
                    match current_direction {
                        Direction::Left => x -= 1,
                        Direction::Down => x += 1,
                        _ => bail!("Reached invalid place!"),
                    }
                }
                Cell::AllDir => {
                    if let Some(cell) == self.cells.get(x-1).and_then(|c| c.get(y)) {
                        match cell {
                            Cell::LeftRight | Cell::Letter(_) => (),
                            _ => bail!("what"),
                        }
                        current_direction = Direction::Left;
                        x -= 1;
                    } else if Some(cell) == self.cells.get(x+1).and_then(|c| c.get(y)) {
                        match cell {
                            Cell::LeftRight | Cell::Letter(_) => (),
                            _ => bail!("what"),
                        }
                        current_direction = Direction::Right;
                        x += 1;
                    } else if Some(cell) == self.cells[x].get(y-1)) {
                        match cell {
                            Cell::UpDown | Cell::Letter(_) => (),
                            _ => bail!("what"),
                        }
                        current_direction = Direction::Up;
                        y += 1;
                    } else if Some(cell) == self.cells[x].get(y+1)) {
                        match cell {
                            Cell::UpDown | Cell::Letter(_) => (),
                            _ => bail!("what"),
                        }
                        current_direction = Direction::Down;
                        y -= 1;
                    } else {
                        break;
                    }
                }
                Cell::Letter(l) =>  {
                    letters.push(l);
                    match current_direction {
                        Direction::Up => y -= 1,
                        Direction::Down => y += 1,
                        Direction::Left => x -= 1,
                        Direction::Right => x += 1,
                    }
                }
                Cell::DoNotEnter => break,
            };
        }
        Ok(letters.iter().collect())
    }
}

fn main() {
    let input = include_str!("input.txt");
    let input = input.trim();

    let map Map = input.parse().expect("");
    let result = map.trace().expect("");
    println!("Result 1: {}", result);
}
